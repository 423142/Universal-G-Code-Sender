/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.willwinder.universalgcodesender.uielements;

import com.willwinder.universalgcodesender.GrblController;
import com.willwinder.universalgcodesender.listeners.ControllerListener;
import com.willwinder.universalgcodesender.types.GcodeCommand;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.vecmath.Point3d;

/**
 *
 * @author wwinder
 */
public class GrblFirmwareSettingsDialog extends javax.swing.JDialog implements ControllerListener {
    // Controller object to fetch settings from.
    private GrblController grblController;
    private TableCellListener tcl;
    private int numberOfSettings = 0;
    //private List<String> commandList;
    private String[] commands = null;
    
    private static int COL_INDEX_SETTING     = 0;
    private static int COL_INDEX_VALUE       = 1;
    private static int COL_INDEX_DESCRIPTION = 2;
    
    /**
     * Creates new form GrblFirmwareSettingsDialog
     */
    public GrblFirmwareSettingsDialog(java.awt.Frame parent, boolean modal, GrblController gcl) throws Exception {
        super(parent, modal);
        initComponents();

        if (gcl == null) {
            throw new Exception("There is no controller. Are you connected?");
        }
        
        this.grblController = gcl;
        this.grblController.addListener(this);
        
        initSettings();
        
        Action action = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                handleSettingChange(tcl.getRow(), tcl.getColumn(), tcl.getOldValue(), tcl.getNewValue());
            }
        };

        tcl = new TableCellListener(this.settingsTable, action);
    }
    
    private void initSettings() throws Exception {
        this.grblController.queueStringForComm("$$");
        
        // TODO: All thats left is to add a messageForConsole handler to pick
        //       out the settings programatically as they arive.
        
        this.addSetting("$1", "99", "(this is the first setting)");
        this.addSetting("$2", "-3", "(more settings)");
        this.addSetting("$3", "pi", "(these will be set in 'messageForConsole')");
        this.addSetting("$4", "42", "(instead of 'initSettings')");
        
        // Update with number of settings received.
        this.numberOfSettings = 4;
    }
    
    /**
     * We are interested in settings.
     */
    @Override
    public void messageForConsole(String msg, Boolean verbose) {

        // Increment for each setting.
        this.numberOfSettings++;
    }
    
    private void addSetting(String setting, String value, String description) {
        ((DefaultTableModel)this.settingsTable.getModel()).addRow(new String[]{
            setting,
            value,
            description});
    }
    
    private void updateSetting(int row, String setting, String value, String description) {
        this.settingsTable.getModel().setValueAt(setting, row, COL_INDEX_SETTING);
        this.settingsTable.getModel().setValueAt(value, row, COL_INDEX_VALUE);
        this.settingsTable.getModel().setValueAt(description, row, COL_INDEX_DESCRIPTION);
    }

    private void handleSettingChange(int row, int column, Object oldValue, Object newValue) {
                
        // TODO: Initialize the command array the first time a column is edited.
        if ((this.commands == null) && (this.numberOfSettings > 0)) {
            this.commands = new String[numberOfSettings];
        }
        
        // If the user somehow edited a command (thus creating the array) before
        // all the commands were loaded this situation arises.
        if (row > this.commands.length) {
            String before[] = this.commands;
            this.commands = new String[numberOfSettings];
            System.arraycopy(before, 0, this.commands, 0, before.length);
        }
        
        String setting = this.settingsTable.getModel().getValueAt(row, COL_INDEX_SETTING).toString();
        String command = setting + "=" + newValue;
        
        this.commands[row] = command;
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        settingsTableScrollPane = new javax.swing.JScrollPane();
        settingsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        settingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Setting", "Value", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        settingsTable.getTableHeader().setReorderingAllowed(false);
        settingsTableScrollPane.setViewportView(settingsTable);
        settingsTable.getColumnModel().getColumn(0).setMinWidth(50);
        settingsTable.getColumnModel().getColumn(0).setMaxWidth(50);
        settingsTable.getColumnModel().getColumn(1).setPreferredWidth(85);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
            .addComponent(settingsTableScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(settingsTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        boolean initialSingleStepMode = this.grblController.getSingleStepMode();
        
        // Single step mode is required for commands which modify GRBL's EEPROM.
        this.grblController.setSingleStepMode(true);
        
        try {
            int i=0;
            for (String command : this.commands) {
                if (command != null) {
                    System.out.println(command);
                    this.grblController.queueStringForComm(command);
                } else {
                    System.out.println("Index " + i + " was not modified");
                }
                i++;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(),
                "Error from firmware while saving settings: " + ex.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);    
        }
        this.grblController.setSingleStepMode(initialSingleStepMode);
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GrblFirmwareSettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GrblFirmwareSettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GrblFirmwareSettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GrblFirmwareSettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                GrblFirmwareSettingsDialog dialog = new GrblFirmwareSettingsDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
                } catch (Exception ex) {
                    System.out.println("Caught exception: " + ex.getMessage());
                    ex.printStackTrace();
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable settingsTable;
    private javax.swing.JScrollPane settingsTableScrollPane;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void fileStreamComplete(String filename, boolean success) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void commandQueued(GcodeCommand command) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void commandSent(GcodeCommand command) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void commandComplete(GcodeCommand command) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void commandComment(String comment) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void statusStringListener(String state, Point3d machineCoord, Point3d workCoord) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }
}
