/*
    Copywrite 2015 Will Winder

    This file is part of Universal Gcode Sender (UGS).

    UGS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    UGS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with UGS.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.willwinder.ugs.nbm.visualizer;

import com.jogamp.opengl.util.Animator;
import com.jogamp.opengl.util.FPSAnimator;
import com.willwinder.ugs.nbp.lookup.CentralLookup;
import com.willwinder.universalgcodesender.listeners.ControlStateListener;
import com.willwinder.universalgcodesender.model.BackendAPI;
import com.willwinder.universalgcodesender.model.BackendAPIReadOnly;
import com.willwinder.universalgcodesender.model.ControlStateEvent.event;
import com.willwinder.universalgcodesender.visualizer.VisualizerCanvas;

import java.awt.BorderLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.WindowEvent;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.willwinder.universalgcodesender.nbm.visualizer//Visualizer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "VisualizerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.willwinder.universalgcodesender.nbm.visualizer.VisualizerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_VisualizerAction",
        preferredID = "VisualizerTopComponent"
)
@Messages({
    "CTL_VisualizerAction=Visualizer",
    "CTL_VisualizerTopComponent=Visualizer Window",
    "HINT_VisualizerTopComponent=This is a Visualizer window"
})


public final class VisualizerTopComponent extends TopComponent implements ControlStateListener {

    private FPSAnimator animator = null;
    private BackendAPIReadOnly backend = null;
    private VisualizerCanvas canvas = null;
    
    public VisualizerTopComponent() {
        initComponents();
        setName(Bundle.CTL_VisualizerTopComponent());
        setToolTipText(Bundle.HINT_VisualizerTopComponent());
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          

    // Variables declaration - do not modify                     
    // End of variables declaration                   

    @Override
    public void componentOpened() {
        backend = CentralLookup.getDefault().lookup(BackendAPI.class);
        backend.addControlStateListener(this);

        setLayout(new BorderLayout());
        canvas = new VisualizerCanvas();
        
        canvas.setSize(this.getSize());
        //canvas.addGLEventListener(this);
        //canvas.addMouseListener(this);
        //canvas.addMouseMotionListener(this);
        add(canvas);
        final Animator animator = new Animator(canvas);
        addComponentListener(new ComponentAdapter() {
            public void windowClosing(WindowEvent e) {
                new Thread(new Runnable() {
                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
        animator.start();
        
        /*
        // Simple example but it still has some issues.
        setLayout(new BorderLayout());
        GLCanvas canvas = new GLCanvas();
        add(canvas);
        canvas.addGLEventListener(new JOGLGearsDemo());
        setSize(this.getSize());
        final Animator animator = new Animator(canvas);
        canvas.setVisible(true);
        animator.start();
        */
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void ControlStateEvent(com.willwinder.universalgcodesender.model.ControlStateEvent cse) {
        if (cse.getEventType() == event.FILE_CHANGED) {
            canvas.setGcodeFile(cse.getFile());
        }
    }

}
